\section{Block Module}

\epigraph{Wearied I fell asleep: But now lead on; In me is no delay; with thee to go, Is to stay here}{Paradise Lost \\John Milton}

The [[block]] module handles blocking in Emacsy.  When I prototyped
Emacsy, I considered this the riskiest part of the project.  If I
couldn't get this to work, it wouldn't be worth trying to develop the
idea further.  To understand what I mean, one can try running the
following in Emacs \verb|M-: (read-key)|.  This will evaluate
[[read-key]] and effectively block until there is another key press.

Implementing ``blocking'' on a small set of bare functions can be done
without too much trickery.  However, what if you have computations
that follow after these functions?  For instance if you evaluate
\verb|M-: (message "Got %s" (read-key))|, [[read-key]] must block
until a key is pressed, then resume the computation that will call
[[message]].  An Operating System must perform a similar operation
whenever a system call is made, usually implemented using interrupts
or traps.  Without recourse to interrupts and bare stack manipulation,
what can we do to achieve a similar feature?  

GNU Guile has a terrific feature called delimited continuations.  Here
is an example of a delimited continuation from the Guile Manual.  This
continuation [[cont]]

\begin{verbatim}
(define cont
  (call-with-prompt
   ;; tag
   'foo
   ;; thunk
   (lambda ()
     (+ 34 (abort-to-prompt 'foo)))
   ;; handler
   (lambda (k) k)))
\end{verbatim}

\noindent could be rewritten as

\begin{verbatim}
(define cont
  (lambda (x)
    (+ 34 x)))
\end{verbatim}.

\noindent I had to read and re-read this example to let it sink in.
What does it buy us?  It allows us to abort a computation at any time
and resume it later.\footnote{Lua's coroutines also seem like a good
  candidate for pulling off a trick like this.  Python's generators,
  however, do not.}  So if we were to implement [[read-key]], we abort
the computation if there has been no key press.  Our main loop in
\verb|C| continues to run, redraw, wait for key presses.  When a key
press comes, we can resume that computation---that continuation.
That's the idea.  What's beautiful about this is that the user code
has access to the same rich input services as the system code without
any unnatural contortions.  These ``system calls'' look like regular
procedure calls much like the Unix call to [[open]] looks like a
regular function call.

One of the key features I figured one bought by embedding a
higher-level language like Scheme was garbage collection.  High-level
blocking while still being low-level non-blocking is a huge boon.
What we'll implement is a simple blocking system using Guile's
delimited continuations, also called prompts.

Let's start with the tests, so the usage is somewhat obvious.

<<block:test>>=
(define done-blocking? #f)
(define (i-block)
  (block-yield)
  (set! done-blocking? #t))
@ 

[[i-block]] will immediately yield.  If it is not called with
[[call-blockable]] then it will throw an error.

<<block:test>>=
(check-throw (i-block) => 'misc-error)
@ 

<<block:procedure>>=
(define-public (block-yield)
  ;; I forgot why I'm running this thunk.
  (run-thunk (abort-to-prompt 'block 'block-until 
                              (const #t) #t)))
@  

[[call-blockable]] will handle any aborts to the [['block]] prompt.
If the thunk aborts, it adds an instance of the class
[[<blocking-continuation>]] to a list of such instances.

<<block:state>>=
(define blocking-continuations '())
@ 

<<block:procedure>>=
(define-public (call-blockable thunk)
  (let ((bc #f))
    (call-with-prompt
     'block
     thunk
     (lambda (cc kind . args)
       (case kind
         ((block-until)
          (let ((continue-command-loop? #t)
                (continue-wait? #t))
            (set! bc <<Make blocking continuation.>>)
            ;; Remember this bc.
            (cons! bc blocking-continuations))))))
    bc))
@ 

<<block:state>>=
;; I want to get rid of this state if I can.
(define-public continue-command-loop? (make-unbound-fluid))
@ 

Let's add a little syntactic sugar [[with-blockable]].

<<block:macro>>=
(define-syntax-public with-blockable
  (syntax-rules ()
    ((with-blockable e ...)
     (call-blockable (lambda () e ...)))))
@ 

<<Make blocking continuation.>>=
(make <blocking-continuation>
  #:tag 'block-until
  #:continuation cc
  #:loop-number 0
  #:continue-when? (car args)
  #:continue-now 
  (lambda ()
    (set! continue-command-loop? #f)
    (if continue-wait?
        (call-blockable
         (lambda () (cc (lambda () #t))))))
  #:serial? (cadr args))
@ 

Now we can call [[i-block]] and capture its continuation.

<<block:test>>=
(check-true (call-blockable (lambda () (i-block))))
(check (length blocking-continuations) => 1)
@ 

To possibly resume these continuations, we're going to call
[[block-tick]].  Additionally, continuations come in two flavors:
serial and non-serial.  The constraints on resuming are different.  A
non-serial block can be resumed whenever the
[[continue-when?]]\todo{rename continue-now?} thunk return true.  A
serial block, however, will only be resumed after every other serial
block that has a greater number, meaning more recent, has been
resumed.
 
<<block:procedure>>=
(define-public (block-tick)
  (set! blocking-continuations
        ;; Sort the continuations by the most recent ones.
        (sort! blocking-continuations (lambda (a b)
                                        (> (number a) (number b)))))
     (let ((ran-serial? #f))
       (for-each 
        (lambda (bc)
          (if (not (serial? bc)) 
              ;; If it's not serial, we might run it.
              (maybe-continue bc)
              ;; If it's serial, we only run the top one.
              (if (and (not ran-serial?) (serial? bc))
                  (begin
                    (if (maybe-continue bc)
                        (set! ran-serial? #t))))))
        blocking-continuations))
     ;; Keep everything that hasn't been run.
     (set! blocking-continuations 
           (filter! (lambda (bc) (not (ran? bc))) 
                    blocking-continuations))
     ;(format #t "blocking-continuations #~a of ~a~%" (length blocking-continuations) (map number blocking-continuations))
     (when (or (null? blocking-continuations)
               (null? (filter serial? blocking-continuations)))
       (run-hook no-blocking-continuations-hook))
    #t)
@ 

\todo[inline]{Maybe get rid of no-blocking-continuations-hook and just have a
predicate to test for whether any blocks exist?}

<<block:procedure>>=
(define*-public (blocking?)
  (> (length blocking-continuations) 0))
@ 

<<block:procedure>>=
(define-method (maybe-continue (obj <blocking-continuation>))
  (if (and (not (ran? obj))
;           (or run-serial? (serial? obj))
           ;; this line crashed.
           (run-thunk (slot-ref obj 'continue-when?)))
      (begin (set! (ran? obj) #t)
             (run-thunk (slot-ref obj 'continue-now))
             #t)
      #f))
@ 

If there are no blocking continuations, we run this hook.

<<block:state>>=
(define-public no-blocking-continuations-hook (make-hook))
@ 

Now we should be able to resume [[i-block]] by running [[block-tick]].

<<block:test>>=
(check done-blocking? => #f)
(check (block-tick) => #t)
(check done-blocking? => #t)
(check (length blocking-continuations) => 0)
@ 

In addition to simply yielding we can block until a particular
condition is met.

<<block:procedure>>=
(define*-public (block-until condition-thunk #:optional (serial? #f))
  (if (not (run-thunk condition-thunk))
      (run-thunk (abort-to-prompt 'block 'block-until 
                                  condition-thunk serial?))))
@ 

\noindent And if we have [[block-until]], it's easy to write
[[block-while]].

<<block:procedure>>=
(define*-public (block-while condition-thunk #:optional (serial? #f))
  (block-until (negate condition-thunk) serial?))
@

Let's exercise this [[block-until]] procedure.
<<block:test>>=
(define continue-blocking? #t)
(define (i-block-until)
  (block-until (lambda () (not continue-blocking?))))
(check (length blocking-continuations) => 0)
(call-blockable (lambda () (i-block-until)))
(check (length blocking-continuations) => 1)
@ 

\noindent Now, even if we call [[block-tick]] it shouldn't be resumed.

<<block:test>>=
(block-tick)
(check (length blocking-continuations) => 1)
@ 

\noindent Let's change the condition for our blocking call.

<<block:test>>=
(set! continue-blocking? #f)
(check (length blocking-continuations) => 1)
(block-tick)
(check (length blocking-continuations) => 0)
@ 

Sometimes we may just want to kill a blocking continuation.  One could
just forget the reference and let it be garbage collected.  Here,
we're going to throw an exception such that whatever the continuation
was doing can potentially be cleaned up.

<<block:procedure>>=
(define-method-public (block-kill (obj <blocking-continuation>))
  (set! (ran? obj) #t)
  (call-blockable
   (lambda () ((slot-ref obj 'continuation)
               (lambda ()
                 (throw 'block-killed obj)
                 #f)))))
@ 

\noindent Let's exercise [[block-kill]].
<<block:test>>=
(set! continue-blocking? #t)
(let ((bc (call-blockable (lambda () (i-block-until)))))
  (check (length blocking-continuations) => 1)
  (block-tick)
  (check (length blocking-continuations) => 1)
  (check-throw (block-kill bc) => 'block-killed)
  ;; The killed block is not cleaned out immediately.
  (check (length blocking-continuations) => 1)
  (block-tick)
  (check (length blocking-continuations) => 0))

@ 

We're going to capture these blocking continuations into a class.

<<block:class>>=
(define-class <blocking-continuation> ()
  (number #:getter number #:init-thunk (let ((count -1))
                                         (lambda () (incr! count))))
  (loop-number #:getter loop-number #:init-keyword #:loop-number)
  (tag #:getter tag #:init-keyword #:tag)
  (continuation #:init-keyword #:continuation)
  (continue-when? #:init-keyword #:continue-when?)
  (continue-now #:init-keyword #:continue-now)
  ;; Has this ran and ready to be deleted?
  (ran? #:accessor ran? #:init-value #f)
  (serial? #:getter serial? #:init-keyword #:serial? #:init-value #t))

(define-method (write (obj <blocking-continuation>) port)
  (write (string-concatenate 
          (list "#<bc " (symbol->string (tag obj))
                " " (number->string (number obj))
                " cl " (number->string (loop-number obj)) ">")) port))
@ 

\noindent There's a lot of information being 



\subsection*{Utilities} 
The [[incr!]] macro is just a little bit of syntactic sugar.

<<util:macro>>=
(define-syntax-public incr!
  (syntax-rules ()
    ((incr! variable inc)
     (begin
       (set! variable (+ variable inc))
       variable))
    ((incr! variable)
     (incr! variable 1))))
@ 

<<util:macro>>=
(define-syntax-public decr!
  (syntax-rules ()
    ((decr! variable inc)
     (incr! variable (- inc)))
    ((decr! variable)
     (decr! variable 1))))
@ 

<<util:macro>>=
(define-syntax-public cons!
  (syntax-rules ()
    ((cons! elm list)
     (begin
       (set! list (cons elm list))
       list))))
@
\subsection*{File Layout} 

<<emacsy/block.scm>>=
(define-module (emacsy block)
  #:use-module (ice-9 optargs)
  #:use-module (oop goops)
  #:use-module (emacsy util))
<<block:macro>>
<<block:class>>
<<block:state>>
<<block:procedure>>
<<block:process>>
@ 

Layout for tests.
<<block-tests.scm>>=
(use-modules (emacsy block)
             (oop goops))

(eval-when (compile load eval)
           ;; Some trickery so we can test private procedures.
           (module-use! (current-module) (resolve-module '(emacsy block))))

<<+ Test Preamble>>
<<block:test>>
<<+ Test Postscript>>
@ 
 
