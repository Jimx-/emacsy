\section{Core}

\epigraph{...}{...}

Now we're going to put in place some core functionality that makes
Emacsy an Emacs-like library.  

We need a global keymap.  

<<core:state>>=
(define-public global-map (make-keymap))
@ 

<<core:procedure>>=
(define-public (current-minor-mode-maps)
  (list))

(define-public (current-active-maps)
  (list (current-local-map) global-map))

(set! default-klecl-maps current-active-maps)
@ 

And here are the most essential key bindings.

<<core:keybinding>>=
(define-key global-map (kbd "M-:")     'eval-expression)
(define-key global-map (kbd "M-x")     'execute-extended-command)
(define-key global-map (kbd "C-g")     'keyboard-quit)
(define-key global-map (kbd "C-x C-c") 'quit-application)
@ 

There is one command that I consider fundamental for an Emacs-like
program.  Whenever I'm presented with a program that claims to be
Emacs-like, I try this out \verb|M-: (+ 1 2)|. If it doesn't work then
it may have Emacs-like key bindings, but it's not Emacs-like.  That
command is [[eval-expression]].  Let's write it.

<<core:command>>=
(define-interactive 
  (eval-expression
   #:optional 
   (expression (read-from-string 
               (completing-read "Eval: " apropos-completion-function))))
  (let ((value (eval expression (interaction-environment))))
    (message "~a" value)
    value))
@ 



<<core:test>>=
(check (eval-expression '(+ 1 2)) => 3)
@ 
[[read-from-string]] parses the string into an expression.

<<util:procedure>>=
(define-public (read-from-string string)
  (call-with-input-string string (lambda (port) (read port))))
@ 

The second fundamental command is [[execute-extended-command]] invoked
with \verb|M-x|.

<<core:command>>=
(define-interactive (execute-extended-command #:optional (n 1))
  ;(display "HERE!\n")
  (let ((str (completing-read "M-x " (completer global-cmdset))))
    (call-interactively (module-ref (current-module) (string->symbol str)))))
@ 

<<core:command>>=
(define-interactive (quit-application)
  (set! emacsy-quit-application? #t))
@ 

<<core:state>>=
(define-public emacsy-quit-application? #f)
@ 

\subsubsection{Keyboard Macro Keybindings}

<<core:keybinding>>=
(define-key global-map (kbd "C-x (") 'kmacro-start-macro)
(define-key global-map (kbd "C-x )") 'kmacro-end-macro)
(define-key global-map (kbd "C-x e") 'kmacro-end-and-call-macro)
@ 

\subsubsection{Buffer Manipulation Keybindings}

<<core:keybinding>>=
(define-key global-map (kbd "C-o")   'other-buffer)
(define-key global-map (kbd "C-x k") 'kill-buffer)
(define-key global-map (kbd "C-x b") 'switch-to-buffer)
@ 

One problem with this is I'd like to give completing-read a list of
objects that will be converted to strings, but I'd like to get the
object out rather than the string.  I want something like this:

<<core:test>>=
(check (let* ((symbols '(aa ab c d)))
   (let-values
       (((to-string from-string) (object-tracker symbol->string)))
     (map from-string (all-completions "a" (map to-string symbols))))) => '(aa ab))
@ 

So let's write it.

<<util:procedure>>=
;; object-tracker :: (a -> b) -> ((a -> b), (b -> a))
(define-public (object-tracker a->b)
  (define (swap-cons c)
    (cons (cdr c) (car c)))
  (let ((cache (make-hash-table)))
    (values
     (lambda (x)
       (let ((y (a->b x)))
         (if (hash-ref cache y)
             (emacsy-log-warning "object-tracker has a duplicate for pairs ~a ~a" (cons x y) (swap-cons (hash-get-handle cache y))))
         (hash-set! cache y x)
         y))
     (lambda (y)
       (or (hash-ref cache y) y)))))
@ 

<<core:procedure>>=
(define-interactive 
  (switch-to-buffer 
   #:optional 
   (buffer
    (let-values (((to-string from-string) (object-tracker buffer-name)))
      (from-string (completing-read "Buffer: " 
                                    (map to-string (buffer-list))))))
   (buffer-class-arg #f))
  (define (coerce buffer)
    (if (is-a? buffer <string>)
        (or (find (lambda (b) (string=? buffer (buffer-name b))) (buffer-list))
            buffer)
        buffer))
  (set! buffer (coerce buffer))
  (if (is-a? buffer <buffer>)
   ((@@ (emacsy buffer) primitive-switch-to-buffer) buffer)
   (if (is-a? buffer <string>)
    ;; Create a new buffer
    (let* ((buffer-class (or buffer-class-arg <<Choose a buffer class.>>))
           (new-buffer <<Create a new buffer of a certain class.>>))
          (add-buffer! new-buffer)
          new-buffer)
    (begin (message "Buffer or buffer-name expected.")
           #f))))
@ 
\todo{XXX Should define-interactive export the symbol?}

We will need to register classes that will be available to the user to
instantiate.

<<Create a new buffer of a certain class.>>=
(make buffer-class #:name buffer)
@ 

<<Choose a buffer class.>>=
(if (= (length buffer-classes) 1)
    ;; If we only have one buffer class, use that.
    (car buffer-classes)
    ;; Otherwise, let the user choose one.
    (let*-values 
        (((to-string from-string) (object-tracker 
                                   (compose symbol->string class-name))))
      (let ((a-buffer-class 
             (from-string (completing-read "Buffer Class: " 
                                           (map to-string buffer-classes)))))
        (if (is-a? a-buffer-class <class>)
            a-buffer-class
            (begin 
              (message "No such class ~a." a-buffer-class)
              (throw 'invalid-class))))))
@ 

<<core:state>>=
(define-public buffer-classes (list <text-buffer>))
@ 


\subsection{Messages Buffer}

<<core:state>>=
(define-public messages 
  (make <text-buffer> #:keymap (make-keymap) #:name "*Messages*"))
@ 

<<core:process>>=
(add-buffer! messages)
@ 

<<core:procedure>>=
(define echo-area "")

(define-public (emacsy-echo-area)
  echo-area)

(define-public (current-message)
  echo-area)

(define (emacsy-message . args)
  (let ((string (apply format #f args)))
   (with-buffer messages
                (insert string)
                (insert "\n"))
   (set! echo-area string)
   string))

;; There's probably a better way to do this.
(set! message emacsy-message)
@ 

When the minibuffer is entered, we want to clear the echo-area.
Because the echo-area is defined in core, it seems best to deal with
it in core rather than placing echo-area handling code in minibuffer.

<<core:procedure>>=
(define-public (clear-echo-area)
  (set! echo-area ""))
@ 

<<core:process>>=
(add-hook! (buffer-enter-hook minibuffer)
           (lambda () (clear-echo-area)))
@ 


We want to be able to load a scheme file.\todo{We should have a
  read-filename procedure.}

<<core:command>>=
(define-interactive 
  (load-file #:optional (filename (read-file-name "Filename: ")))
  (catch #t
    #.\ (begin (load filename)
               (message "Loaded ~a." filename)
               #t)
    (lambda (key . args)
      (let ((error-msg 
             (call-with-output-string 
              #.\ (apply display-error #f % args))))
        (message "Failed to load ~a: ~a" filename error-msg)
        #f))))
@ 

These are most of the C API calls.

<<core:procedure>>=
(define-public (emacsy-message-or-echo-area)
  (if emacsy-display-minibuffer?
      (buffer-string minibuffer)
      echo-area))

(define-method-public (emacsy-mode-line)
  (emacsy-mode-line (current-buffer)))

;; XXX this should be moved into the (emacsy buffer) module.
(define-method-public (emacsy-mode-line (buffer <buffer>))
  (format #f "-:**- ~a" (buffer-name buffer)))

(define-public (emacsy-minibuffer-point)
  (if emacsy-display-minibuffer?
      (point minibuffer)
      -1))

(define-public (emacsy-run-hook hook . args)
  (catch #t
    (lambda () 
      (if debug-on-error?
          (call-with-error-handling
           (lambda ()
             (apply run-hook hook args)
             #t))
          (with-backtrace* 
           (lambda ()  
             (apply run-hook hook args)
             #t))))
    (lambda (key . args)
      (emacsy-log-error "Hook ~a threw error '~a with args ~a " hook key args)
      (emacsy-log-error "Resetting hook ~a" hook)
;      (reset-hook! hook)
      #f)))

(define-public emacsy-terminate-hook (make-hook))
(define-public emacsy-initialize-hook (make-hook))
(define initialized? #f)

(define-public (emacsy-terminate)
  (run-hook emacsy-terminate-hook))

(define-public (emacsy-tick)
  (unless initialized?
    (call-blockable          
      (lambda ()
        (run-hook emacsy-initialize-hook)))
    (set! initialized? #t))
  (block-tick))
@ 

We need to be able to deal with exceptions gracefully where ever they
may pop up.  

<<core:test>>=
(define (good-hook)
  #t)
(define (bad-hook)
  (throw 'some-error))
(define my-hook (make-hook 0))

(check-throw (run-hook my-hook) => 'no-throw)
(check-throw (emacsy-run-hook my-hook) => 'no-throw)
(check (emacsy-run-hook my-hook) => #t)
(add-hook! my-hook good-hook)
(check-throw (emacsy-run-hook my-hook) => 'no-throw)
(add-hook! my-hook bad-hook)
(check-throw (run-hook my-hook) => 'some-error)
(check-throw (emacsy-run-hook my-hook) => 'no-throw)
(check (emacsy-run-hook my-hook) => #f)
@

We want to be able to define variables that are not redefined if a
source file or module is reloaded.

<<core:macro>>=
(define-syntax-public define-variable
  (syntax-rules ()
    ;; Should be able to include a description.
    ((define-variable name variable)
     (if (not (module-variable (current-module) 'name))
         (module-define! (current-module) 'name variable)))))
@ 

\subsection{Mouse Movement}

Sometimes we may want to track the motion events generated by a mouse.
We don't do this all the time because it seems unnecessarily taxing.  

<<core:state>>=
(define-public emacsy-send-mouse-movement-events? #f)
@ 

<<core:macro>>=
(define-syntax-public track-mouse
  (syntax-rules ()
    ((track-mouse e ...)
     (in-out-guard  ;; This is different from dynamic-wind.
       (lambda () (set! emacsy-send-mouse-movement-events? #t))
       (lambda () e ...)
       (lambda () (set! emacsy-send-mouse-movement-events? #f))))))
@ 

<<core:procedure>>=
(define*-public (read-from-mouse #:optional (prompt #f))
  (define (my-read-event) 
    (if (and (pair? this-command-event)
             (mouse-event? (car this-command-event)))
        (let ((event (car this-command-event)))
          (set! this-command-event (cdr this-command-event))
          event)
          ;; XXX Should this be read-key or read-event?
        (read-event prompt)))
  (let loop ((event (my-read-event)))
    (if (mouse-event? event)
        ;; Got an event.
        (position event)
        (let ((canceled? #f))
          ;; Put this event back in the queue.  
          (emacsy-event event)
          (catch
            'quit-command
            (lambda () (primitive-command-tick))
            (lambda (key . args)
              (emacsy-log-debug "READ-FROM-MOUSE CANCELED\n")
              (set! canceled? #t)))
          (if canceled?
              (throw 'quit-command 'quit-read-from-mouse)
              (loop (my-read-event)))))))
@

<<core:test>>=
(emacsy-discard-input!)
(emacsy-key-event #\a)
(define mouse-event #f)
(with-blockable (set! mouse-event (read-from-mouse)))
(block-tick)
(check mouse-event => #f)
(emacsy-mouse-event #(0 0) 1 'down)
(block-tick)
(check-true mouse-event)
@ 

\subsection{Command Loop}

If we ever run out of command loops due to errors, we start a new one.

<<core:procedure>>=
(define (restart-command-loop)
  ;; Start another command-loop
  (emacsy-log-warning "NO COMMAND LOOPS; STARTING ANOTHER.")
  (call-blockable (lambda () (command-loop))))
@ 

And if we have warning, we emit then through [[emacsy-log-warning]].

<<util:procedure>>=
(define-public (emacsy-log-warning format-msg . args)
  (apply format (current-error-port) format-msg args)
  (newline (current-error-port)))
@

<<core:process>>=
(add-hook! no-blocking-continuations-hook restart-command-loop)
@ 

\subsection*{File Layout} 

<<file:core.scm>>=
(define-module (emacsy core)
  #:use-module (ice-9 optargs)
  #:use-module (ice-9 readline)
  #:use-module (oop goops)
  #:use-module (rnrs io ports)
  #:use-module (debugging assert)
  #:use-module (system repl error-handling)
  #:use-module (srfi srfi-1)  ;; take
  #:use-module (srfi srfi-11) ;; let-values
  #:use-module (srfi srfi-26) ;; cut cute
  #:use-module (convenience-lambda)  
  #:use-module (emacsy util)
  #:use-module (emacsy keymap)
  #:use-module (emacsy event)
  #:use-module (emacsy buffer)
  #:use-module (emacsy command)
  #:use-module (emacsy block)
  #:use-module (emacsy klecl)
  #:use-module (emacsy kbd-macro)
  #:use-module (emacsy minibuffer)
  #:replace (switch-to-buffer))
<<core:macro>>
<<core:class>>
<<core:state>>
<<core:procedure>>
<<core:command>>
<<core:keybinding>>
<<core:process>>
@ 

Layout for tests.
<<file:core-test.scm>>=
(use-modules (emacsy core)
             (emacsy event)
             (emacsy klecl)
             (oop goops)
             (srfi srfi-11))

(eval-when (compile load eval)
           ;; Some trickery so we can test private procedures.
           (module-use! (current-module) (resolve-module '(emacsy core))))

<<+ Test Preamble>>
<<core:test>>
<<+ Test Postscript>>
@ 
% -*- mode: Noweb; noweb-code-mode: scheme-mode -*-
