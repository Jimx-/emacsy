\section{Command Module}

\epigraph{If words of command are not clear and distinct, if orders are not thoroughly understood, then the general is to blame.}{Sun Tzu}

The command module is responsible for a couple things.  In Emacs one
defines commands by using the special form [[(interactive)]] within
the body of the procedure.  Consider this simple command.

\begin{verbatim}
(defun hello-command ()
  (interactive)
  (message "Hello, Emacs!"))
\end{verbatim}

Emacsy uses a more Scheme-like means of defining commands as shown
below.

\begin{verbatim}
(define-interactive (hello-command)
  (message "Hello, Emacsy!"))
\end{verbatim}

One deviation from Emacs I want to see within Emacsy is to have the
commands be more context sensitive.  To illustrate the problem when I
hit \verb|M-x TAB TAB| it autocompletes all the available commands
into a buffer.  In my case that buffer contains 4,840 commands.  This
doesn't seem to hurt command usability, but it does hurt the command
discoverability.

I want Emacsy to have command sets that are analogous to keymaps.
There will be a global command set [[global-cmdset]] similar to the
global keymap [[global-map]].  And in the same way that major and
minor modes may add keymaps to a particular buffer, so too may they
add command maps.

\todo[inline]{Figure out where to look up any given
  function/variable using this kind of code (apropos-internal
  "\^emacsy.*").  Refer to ice-9 readline package for an example of
  its usage.}

The class holds the entries, a string completer for tab completion,
and potentially a parent command map.

\todo[inline]{Wouldn't this better be thought of as a command set
  rather than map.  Also, having it as a map means there could be two
  different implementations of the command; the one referred to by the
  procedure, and the one referred to in the map.  They could be become
  unsynchronized.}

<<command:class>>=
(define-class-public <command-set> ()
  (commands #:getter commands #:init-form (list))
  (completer #:getter completer #:init-form (make <string-completer>))
  (parent #:accessor parent #:init-keyword #:parent #:init-value #f))
(export commands completer)
@ 

We have accessors for adding, removing, and testing what's in the
set. Note that the parent set is never mutated.

<<command:procedure>>=
(define-method-public (command-contains? (cmap <command-set>) command-symbol)
  (or (memq command-symbol (commands cmap))
      (and (parent cmap) (command-contains? (parent cmap) command-symbol))))

(define-method-public (command-add! (cmap <command-set>) command-symbol)
  (when (not (command-contains? cmap command-symbol)) 
      (add-strings! (completer cmap) (list (symbol->string command-symbol)))
      (slot-set! cmap 'commands (cons command-symbol (commands cmap)))))

(define-method-public (command-remove! (cmap <command-set>) command-symbol)
  (when (command-contains? cmap command-symbol) 
    (slot-set! cmap 'commands (delq! command-symbol (commands cmap)))
    ;; Must rebuild the completer.
    (let ((c (make <string-completer>)))
      (add-strings! c (map symbol->string (commands cmap)))
      (slot-set! cmap 'completer c))))
@ 

We define the global command map.

<<command:state>>=
(define-public global-cmdset (make <command-set>))
@ 

\todo[inline]{Perhaps procedure-properties should be used to denote a
  procedure as a command?}

<<command:macro>>=
(define-syntax-public define-interactive
  (syntax-rules ()
    ((define-interactive (name args ...) expr ...)
     (begin (define* (name args ...)
        expr ...)
            (export name)
            (command-add! global-cmdset 'name)))
    ((define-interactive name value)
     (begin (define* name value)
            (command-add! global-cmdset 'name)))))
@ 

<<command:macro>>=
(define-syntax-public define-cmd
  (syntax-rules ()
    ((define-cmd cmap (name . args) expr ...)
     (begin (define* (name . args)
        expr ...)
        (export name)
        (command-add! cmap 'name)))
    ((define-cmd cmap name value)
     (begin (define* name value)
        (export name)
        (command-add! cmap 'name)))))
@ 

<<command:procedure>>=
(define-public (register-interactive name proc)
  (command-add! global-cmdset name))
@ 


<<command:procedure>>=
(define-public (command->proc command)
  (cond
   ((thunk? command)
    command)
   ((symbol? command)
    (eval command (interaction-environment)))
   (else
    (warn "command->proc not given a command")
    #f)))
@ 

<<command:procedure>>=
(define-public (command? object)
  (procedure? (command->proc object)))
@ 

\subsection*{File Layout}

<<emacsy/command.scm>>=
(define-module (emacsy command)
  #:use-module (string completion)
  #:use-module (oop goops)
  #:use-module (ice-9 optargs)
  #:use-module (emacsy util))
<<command:macro>>
<<command:class>>
<<command:state>>
<<command:procedure>>
<<command:process>>
@ 

Layout for tests.
<<command-tests.scm>>=
(use-modules (emacsy command)
             (emacsy event)
             (oop goops))

(eval-when (compile load eval)
           ;; Some trickery so we can test private procedures.
           (module-use! (current-module) (resolve-module '(emacsy command))))

<<+ Test Preamble>>
<<command:test>>
<<+ Test Postscript>>
@ 
